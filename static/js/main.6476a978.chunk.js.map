{"version":3,"sources":["features/investments/selector/selectorSlice.js","features/investments/selector/Selector.js","util/dummyInvestmentPlans.js","features/investments/visualizer/Visualizer.js","features/investments/customizer/investmentOperations.util.js","features/investments/customizer/Customizer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","value","reducers","setRisk","state","action","payload","actions","withRouter","history","selectedRisk","useSelector","risk","dispatch","useDispatch","riskButtons","i","push","ToggleButton","key","size","className","ToggleButtonGroup","type","onChange","riskLevel","role","style","width","aria-valuenow","aria-valuemin","aria-valuemax","Button","variant","onClick","riskTable","Risk","fetchRiskTable","_","require","RiskTable","Object","keys","map","scope","riskData","RiskDoughnutChart","omit","find","element","chartData","labels","datasets","data","backgroundColor","hoverBackgroundColor","Visualizer","useState","showChart","setShowChart","tabindex","InvestmentFormRow","withTitle","difference","newDistribution","registerHandler","FormGroup","Row","Col","FormLabel","InputGroup","Prepend","Text","id","FormControl","tabIndex","ref","defaultValue","min","Append","Number","readOnly","isNaN","SmallRiskTable","useForm","register","handleSubmit","results","setResults","mapKeys","replace","trim","Card","Header","Body","md","Form","onSubmit","totalMoney","desiredDistribution","mapValues","toFixed","calculateNewDistribution","reduce","total","calculateTotalMoney","calculateDifference","transfers","incomingDifference","cloneDeep","forEach","toFillKey","toSubtractKey","trasnferAmount","from","to","amount","Math","abs","calculateTransfers","index","undefined","length","transfer","App","Container","href","exact","path","configureStore","reducer","riskReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6476a978.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// State can be \"mutated\" because of Immer (part of Redux Toolkit) https://github.com/immerjs/immer\nexport const slice = createSlice({\n  name: \"riskSelector\",\n  initialState: {\n    value: 1,\n  },\n  reducers: {\n    setRisk: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const actions = slice.actions;\n\nexport default slice.reducer;\n","import React from \"react\";\nimport { Button, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { actions } from \"./selectorSlice\";\nimport \"./styles.css\";\n\nconst Selector = ({ history }) => {\n  const selectedRisk = useSelector((state) => state.risk.value);\n  const dispatch = useDispatch();\n  const handleRiskChange = (riskLevel) => {\n    dispatch(actions.setRisk(riskLevel));\n  };\n\n  let riskButtons = [];\n  for (let i = 1; i <= 10; i++) {\n    riskButtons.push(\n      <ToggleButton key={i} value={i} size=\"lg\">\n        {i}\n      </ToggleButton>\n    );\n  }\n  return (\n    <div>\n      <h3>Please Select A Risk Level For Your Investment Portfolio</h3>\n      <div className=\"selector-container\">\n        <div className=\"selector-title\">\n          <div>Low</div>\n          <div>High</div>\n        </div>\n        <ToggleButtonGroup\n          type=\"radio\"\n          name=\"riskLevels\"\n          value={selectedRisk}\n          onChange={handleRiskChange}\n        >\n          {riskButtons}\n        </ToggleButtonGroup>\n\n        <div className=\"progress selector-bar\">\n          <div\n            className=\"progress-bar progress-bar-striped\"\n            role=\"progressbar\"\n            style={{ width: selectedRisk * 10 + \"%\" }}\n            aria-valuenow=\"25\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n          ></div>\n        </div>\n        <Button\n          variant=\"success\"\n          onClick={() => {\n            history.push(\"/customize\");\n          }}\n        >\n          Continue to Portfolio Personalization\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Selector);\n","const riskTable = [\n  {\n    Risk: 1,\n    \"Bonds %\": 80,\n    \"Large Cap %\": 20,\n    \"Mid Cap %\": 0,\n    \"Foreign %\": 0,\n    \"Small Cap %\": 0,\n  },\n  {\n    Risk: 2,\n    \"Bonds %\": 70,\n    \"Large Cap %\": 15,\n    \"Mid Cap %\": 15,\n    \"Foreign %\": 0,\n    \"Small Cap %\": 0,\n  },\n  {\n    Risk: 3,\n    \"Bonds %\": 60,\n    \"Large Cap %\": 15,\n    \"Mid Cap %\": 15,\n    \"Foreign %\": 10,\n    \"Small Cap %\": 0,\n  },\n  {\n    Risk: 4,\n    \"Bonds %\": 50,\n    \"Large Cap %\": 20,\n    \"Mid Cap %\": 20,\n    \"Foreign %\": 10,\n    \"Small Cap %\": 0,\n  },\n  {\n    Risk: 5,\n    \"Bonds %\": 40,\n    \"Large Cap %\": 20,\n    \"Mid Cap %\": 20,\n    \"Foreign %\": 20,\n    \"Small Cap %\": 0,\n  },\n  {\n    Risk: 6,\n    \"Bonds %\": 35,\n    \"Large Cap %\": 25,\n    \"Mid Cap %\": 5,\n    \"Foreign %\": 30,\n    \"Small Cap %\": 5,\n  },\n  {\n    Risk: 7,\n    \"Bonds %\": 20,\n    \"Large Cap %\": 25,\n    \"Mid Cap %\": 25,\n    \"Foreign %\": 25,\n    \"Small Cap %\": 5,\n  },\n  {\n    Risk: 8,\n    \"Bonds %\": 10,\n    \"Large Cap %\": 20,\n    \"Mid Cap %\": 40,\n    \"Foreign %\": 20,\n    \"Small Cap %\": 10,\n  },\n  {\n    Risk: 9,\n    \"Bonds %\": 5,\n    \"Large Cap %\": 15,\n    \"Mid Cap %\": 40,\n    \"Foreign %\": 25,\n    \"Small Cap %\": 15,\n  },\n  {\n    Risk: 10,\n    \"Bonds %\": 0,\n    \"Large Cap %\": 5,\n    \"Mid Cap %\": 25,\n    \"Foreign %\": 30,\n    \"Small Cap %\": 40,\n  },\n];\n\nexport const fetchRiskTable = () => {\n  return riskTable;\n};\n","import React, { Fragment, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { fetchRiskTable } from \"../../../util/dummyInvestmentPlans\";\n\nvar _ = require(\"lodash\");\nconst riskTable = fetchRiskTable();\n\nconst Visualizer = () => {\n  const selectedRisk = useSelector((state) => state.risk.value);\n  const [showChart, setShowChart] = useState(false);\n\n  return (\n    <div>\n      {showChart ? (\n        <Fragment>\n          <Button\n            variant=\"outline-secondary\"\n            onClick={() => {\n              setShowChart(false);\n            }}\n          >\n            Show Table\n          </Button>\n          <br />\n          <br />\n          <RiskDoughnutChart selectedRisk={selectedRisk} />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Button\n            variant=\"outline-secondary\"\n            onClick={() => {\n              setShowChart(true);\n            }}\n          >\n            Show Chart\n          </Button>\n          <br />\n          <br />\n          <RiskTable selectedRisk={selectedRisk} />\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nconst RiskTable = ({ selectedRisk }) => {\n  return (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          {Object.keys(riskTable[0]).map((key) => {\n            return (\n              <th key={key} scope=\"col\">\n                {key}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {riskTable.map((riskData) => {\n          return (\n            <tr\n              key={riskData.Risk}\n              className={riskData.Risk === selectedRisk ? \"table-primary\" : \"\"}\n            >\n              {Object.keys(riskData).map((key) => {\n                return <td key={key}>{riskData[key]}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst RiskDoughnutChart = ({ selectedRisk }) => {\n  const riskData = _.omit(\n    riskTable.find((element) => element.Risk === selectedRisk),\n    \"Risk\"\n  );\n  const chartData = {\n    labels: Object.keys(riskData).map((key) => key),\n    datasets: [\n      {\n        data: Object.keys(riskData).map((key) => riskData[key]),\n        backgroundColor: [\n          \"#FF6384\",\n          \"#36A2EB\",\n          \"#FFCE56\",\n          \"#3cba9f\",\n          \"#e8c3b9\",\n        ],\n        hoverBackgroundColor: [\n          \"#FF6384\",\n          \"#36A2EB\",\n          \"#FFCE56\",\n          \"#3cba9f\",\n          \"#e8c3b9\",\n        ],\n      },\n    ],\n  };\n\n  return <Doughnut data={chartData} />;\n};\n\nexport default Visualizer;\n","var _ = require(\"lodash\");\n\n// Given a investment amount and a investment plan, returns the ideal way to distribute the money\nexport const calculateNewDistribution = (totalMoney, desiredDistribution) => {\n  return _.mapValues(\n    desiredDistribution,\n    (value) => +Number((value / 100) * totalMoney).toFixed(2)\n  );\n};\n\n// Given a current investment portfolio and an ideal distribution, returns the difference between the two\nexport const calculateDifference = (data, newDistribution) =>\n  _.mapValues(data, (value, key) => +(newDistribution[key] - value).toFixed(2));\n\n// Given a current investment portfolio, returns the total amount of invested money\nexport const calculateTotalMoney = (data) =>\n  Object.keys(data).reduce((total, key) => total + Number(data[key]), 0);\n\n// Given the difference calculated between the current investment portfolio and an ideal distribution,\n// will calculate the needed money transfers in between investment sectors in order to adapt the users portfolio to the ideal one\nexport const calculateTransfers = (incomingDifference) => {\n  let difference = _.cloneDeep(incomingDifference); //In order to not modify incoming object and remain pure\n  let transfers = []; // Array in which to store the data that describes the needed transfers in between investments\n  const keys = Object.keys(difference);\n\n  keys.forEach((toFillKey) => {\n    if (difference[toFillKey] > 0) {\n      // This sector needs to be filled\n\n      for (let toSubtractKey of keys) {\n        // Search for others from where to fill in\n\n        if (difference[toSubtractKey] < 0) {\n          let trasnferAmount = 0;\n          if (difference[toFillKey] + difference[toSubtractKey] >= 0) {\n            // Use all of this investment to fill the other (possibly all the way)\n            trasnferAmount = +difference[toSubtractKey].toFixed(2);\n\n            difference[toFillKey] += trasnferAmount;\n            difference[toSubtractKey] = 0;\n          } else {\n            //Only take what's neccesary and leave the rest\n            trasnferAmount = +difference[toFillKey].toFixed(2);\n\n            difference[toSubtractKey] += trasnferAmount;\n            difference[toFillKey] = 0;\n          }\n\n          // Generate a suggested transfer between sectors\n          transfers.push({\n            from: toSubtractKey,\n            to: toFillKey,\n            amount: Math.abs(trasnferAmount),\n          });\n\n          if (difference[toFillKey] === 0) {\n            // This sector is already filled, no need to keep iterating\n            break;\n          }\n        }\n      }\n    }\n  });\n  return transfers;\n};\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./styles.css\";\nimport {\n  Button,\n  Card,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  InputGroup,\n  FormControl,\n  FormLabel,\n} from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { fetchRiskTable } from \"../../../util/dummyInvestmentPlans\";\nimport {\n  calculateTotalMoney,\n  calculateNewDistribution,\n  calculateDifference,\n  calculateTransfers,\n} from \"./investmentOperations.util\";\nvar _ = require(\"lodash\");\n\nconst riskTable = fetchRiskTable();\n\n// Used to set the tabbing index on the investment portfolio form\nlet tabindex = 0;\n\nconst Customizer = ({ history }) => {\n  const selectedRisk = useSelector((state) => state.risk.value);\n  const { register, handleSubmit } = useForm();\n  const [results, setResults] = useState(null);\n\n  //Select only the row we need and clean up the % sign from the data\n  const riskData = _.mapKeys(\n    _.omit(\n      riskTable.find((element) => element.Risk === selectedRisk),\n      \"Risk\"\n    ),\n    (value, key) => key.replace(\"%\", \"\").trim()\n  );\n\n  // Handle form submission and calculate the results\n  const onSubmitPortfolio = (data) => {\n    const totalMoney = calculateTotalMoney(data);\n    const newDistribution = calculateNewDistribution(totalMoney, riskData);\n    const difference = calculateDifference(data, newDistribution);\n    const transfers = calculateTransfers(difference);\n\n    setResults({ difference, newDistribution, transfers });\n  };\n\n  return (\n    <div>\n      <Button\n        className=\"mb-3\"\n        variant=\"primary\"\n        onClick={() => {\n          history.push(\"/\");\n        }}\n      >\n        Back to risk selection\n      </Button>\n      <h3>Personalized Portfolio</h3>\n      <h5>Investment Risk Level {selectedRisk}</h5>\n      <SmallRiskTable riskData={riskData} />\n\n      <Card className=\"mt-2\">\n        <Card.Header>Rebalance Your Portfolio</Card.Header>\n        <Card.Body>\n          <h6>\n            This tool will help you convert your current investment portfolio\n            into our suggested ideal portfolio. This ideal suggestion is based\n            on your desired risk factor.\n          </h6>\n          <p className=\"text-muted text-sm\">\n            Please fill in your current investments in order to calculate the\n            needed transfers to adapt to your new portfolio\n          </p>\n          <Row>\n            <Col md={9}>\n              <Form onSubmit={handleSubmit(onSubmitPortfolio)}>\n                {Object.keys(riskData).map((key, index) => {\n                  return (\n                    <InvestmentFormRow\n                      key={key}\n                      withTitle={index === 0}\n                      name={key}\n                      registerHandler={register}\n                      difference={results ? results.difference[key] : undefined}\n                      newDistribution={\n                        results ? results.newDistribution[key] : undefined\n                      }\n                    />\n                  );\n                })}\n\n                <Button variant=\"success\" type=\"submit\">\n                  Rebalance Your Portfolio\n                </Button>\n              </Form>\n            </Col>\n            <Col>\n              <FormLabel>\n                <strong>Recommended Transfers</strong>\n              </FormLabel>\n              <Card>\n                <Card.Body>\n                  {results ? (\n                    results.transfers.length > 0 ? (\n                      results.transfers.map((transfer, index) => {\n                        return (\n                          <div key={index}>\n                            Transfer{\" \"}\n                            <span className=\"text-success\">\n                              {transfer.amount}$\n                            </span>{\" \"}\n                            from {transfer.from} to {transfer.to}.\n                          </div>\n                        );\n                      })\n                    ) : (\n                      <div>\n                        It appears your portfolio is already balanced according\n                        to your desired risk factor. There are no transactions\n                        needed to be done!\n                      </div>\n                    )\n                  ) : (\n                    <div className=\"text-muted\">\n                      Please enter your current portfolio and click on the\n                      button to rebalance in order to see the needed\n                      transactions to adapt your portfolio to an ideal one\n                    </div>\n                  )}\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nconst InvestmentFormRow = ({\n  withTitle,\n  name,\n  difference,\n  newDistribution,\n  registerHandler,\n}) => {\n  tabindex++;\n  return (\n    <FormGroup>\n      <Row>\n        <Col>\n          {withTitle ? <FormLabel>Current Investment</FormLabel> : null}\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text className=\"input-addon\" id=\"basic-addon1\">\n                {name}\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              tabIndex={tabindex}\n              type=\"number\"\n              name={name}\n              ref={registerHandler}\n              defaultValue={0}\n              min={0}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Col>\n        <Col>\n          {withTitle ? <FormLabel>Difference</FormLabel> : null}\n          <FormControl\n            className={\n              Number(difference) > 0\n                ? \"text-success\"\n                : difference < 0\n                ? \"text-danger\"\n                : \"\"\n            }\n            readOnly\n            tabIndex={-1}\n            value={!isNaN(difference) ? difference : \"-\"}\n          />\n        </Col>\n        <Col>\n          {withTitle ? <FormLabel>New Investment Amount</FormLabel> : null}\n          <FormControl\n            readOnly\n            className=\"text-info\"\n            tabIndex={-1}\n            value={!isNaN(newDistribution) ? newDistribution : \"-\"}\n          />\n        </Col>\n      </Row>\n    </FormGroup>\n  );\n};\n\nconst SmallRiskTable = ({ riskData }) => {\n  return (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          {Object.keys(riskData).map((key) => {\n            return (\n              <th key={key} scope=\"col\">\n                {key}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {Object.keys(riskData).map((key) => {\n            return <td key={key}>{riskData[key]}</td>;\n          })}\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default withRouter(Customizer);\n","import \"bootswatch/dist/flatly/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Selector from \"./features/investments/selector/Selector\";\r\nimport Visualizer from \"./features/investments/visualizer/Visualizer\";\r\nimport Customizer from \"./features/investments/customizer/Customizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\r\n          <Container>\r\n            <a className=\"navbar-brand\" href=\"https://github.com/JRebella\">\r\n              Juan Rebella\r\n            </a>\r\n            <div className=\"text-white\">\r\n              Financial Advisor ReactJS Challenge\r\n            </div>\r\n          </Container>\r\n        </nav>\r\n        <Container>\r\n          <Switch>\r\n            <Route exact path=\"/reactjs-challenge/\">\r\n              <Selector />\r\n              <hr />\r\n              <Visualizer />\r\n            </Route>\r\n            <Route path=\"/reactjs-challenge/customize\">\r\n              <Customizer />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport riskReducer from \"../features/investments/selector/selectorSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    risk: riskReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}